openapi: 3.0.0

info:
  title: Hobby-connect API
  description: Rest API for Hobby-Connect
  version: 0.0.1
  termsOfService: https://hobby-connect.de/
  contact:
    name: Ferdinand Strobel
    email: ferdistr08@gmail.com
    url: http://ferdi-homelab.casa/
tags:
  - name: hobby-connect

paths:
  /getNews:
    get:
     tags:
        - hobby-connect
     summary: getNews
     description: get 5 News for mobie newsFeed
     operationId: getNews
     parameters:
        - name: sessionID
          in: header
          required: true
          description: must be vaild sessionId for User
          example: sess_84266fdbd31d4c2c6d0665f7e8380fa3
          schema:
           type: string
     responses:
      "200":
        description: Success
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newsResponse"


  /logoutUser:
    get:
      tags:
        - hobby-connect
      summary: getLogoutUser
      description: Log of User and Return to the Home-screen, session will be deleted
      operationId: getLogoutUser
      parameters:
        - name: sessionID
          in:  header
          required: true
          description: must be vaild sessionId for User to log him out
          example: sess_84266fdbd31d4c2c6d0665f7e8380fa3
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/logoutUserResponse"

  /profilePage:
    get:
      tags:
        - hobby-connect
      summary: getProfilePage
      description: Get own Porfile page with settings
      operationId: getProfilePage
      parameters:
        - name: sessionID
          in: header
          required: true
          description: must be valid sessionId for User
          example: sess_84266fdbd31d4c2c6d0665f7e8380fa3
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profilePage"

  /updateProfilePage:
    put:
      tags:
        - hobby-connect
      summary: putUpateProfilePage
      description: upte user data with settings
      operationId: putUpdateProfilePage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/profilePage"
      parameters:
        - name: sessionID
          in: header
          required: true
          description: must be valid sessionId for User
          example: sess_84266fdbd31d4c2c6d0665f7e8380fa3
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateProfilePageResponse"



  /nextUsers:
    get:
      tags:
        - hobby-connect
      summary: getNextUsers
      description: get List of next 5 Users
      operationId: getNextUsers
      parameters:
        - name: sessionID
          in: header
          required: true
          description:  must be valid sessionId for User
          example: sess_84266fdbd31d4c2c6d0665f7e8380fa3
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/nextUsersResponse"

  /loginUser:
    post:
      tags:
        - hobby-connect
      summary: postLoginUser
      description: login user with email and password
      operationId: postLoginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginUserBody"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginUserResponse"
        "401":
          description: Unauthorized

  /likeUser:
    post:
      tags:
        - hobby-connect
      summary: postLikeUser
      description: Like a User  with UserId
      operationId: postLikeUser
      parameters:
        - name: userId
          in: query
          required: true
          description: userId from liked User
          schema:
            type: string
        - name: sessionID
          in: header
          required: true
          description: must be valid sessionId for User
          example: sess_84266fdbd31d4c2c6d0665f7e8380fa3
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/likeLogicResponse"

  /dislikeUser:
    post:
      tags:
        - hobby-connect
      summary: postDisLikeUser
      description: Dislike a User  with UserId
      operationId: postDisLikeUser
      parameters:
        - name: userId
          in: query
          required: true
          description: userId from disliked User
          schema:
            type: string
        - name: sessionID
          in: header
          required: true
          description: must be valid sessionId for User
          example: sess_84266fdbd31d4c2c6d0665f7e8380fa3
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/likeLogicResponse"



components:
  schemas:

    newsResponse:
      type: object
      properties:
        news:
          type: array
          description: list of next fives news for the mobile news Feed
          items:
            $ref: "#/components/schemas/news"

    news:
      type: object
      properties:
        id:
          type: string
          description: UUID of the news
          example: 00011uejklr
        published:
          type: string
          description: time when the news was released
          example: 20 min
        text:
          type: string
          description: Text which descipes news
          example: A New Hobby has been added! Cricket is now available
        pic:
          type: string
          description: URL to picture
        userName:
          type: string
          description: userName of team which releasted news, for future every user can publish news
          example: hobby-connect-Team
        userPic:
          type: string
          description: link to user-Profile-Pic (team pic),





    logoutUserResponse:
      type: object
      properties:
        sessionID:
          type: string
          description: sessionID which is destroyed
          example: sess_84266fdbd31d4c2c6d0665f7e8380fa3
        completed:
          type: boolean
          description: completed operation
          example: true

    updateProfilePageResponse:
      type: object
      properties:
        id:
          type: string
          description: userId
          example: asdjfoiasjdfuaw39fj8hjf
        completed:
          type: boolean
          description: commpled operation
          example: true

    profilePage:
      type: object
      properties:
        type:
          type: string
          description: user type
          example: type
        id:
          type: string
          description: user id
          example: asdjfoiasjdfuaw39fj8hjf
        name:
          type: string
          description: user name
          example: Oskar
        surname:
          type: string
          description: surname of user
          example: Herrmann
        age:
          type: integer
          description: age of user
          example: 19
        location:
          type: string
          description: location of userr
          example: wuerzburg
        accountCreation:
          type: string
          description: date of account creation in 00.00.0000 format
          example: 01.01.2023
        description:
          type: string
          description: profile description


    nextUsersResponse:
      type: object
      properties:
        nextUsers:
          type: array
          description: list of next five Users
          items:
            $ref: "#/components/schemas/nextUser"

    nextUser:
      type: object
      description: User Object (not own User)
      properties:
        type:
          type: string
          description: user type
          example: user
        id:
          type: string
          description: userId
          example: asdjfoiasjdfuaw39fj8hjf
        name:
          type: string
          description: User name
          example: oskar
        age:
          type: integer
          description: User age
          example: 19
        location:
          type: string
          description: location  of User
          example: Wuerzburg
        description:
          type: string
          description: self description of user
          example: Ich bin der Oskar und suche leute fuer ein cooles Hobby
        content:
          type: array
          description: content of User
          items:
            $ref: "#/components/schemas/content"

    content:
      type: object
      description: All content of one hobby with all widgets and posts
      properties:
        type:
          type: string
          description: Hobby type
          example: hobby
        id:
          type: string
          description: hobby id
          example: 2uf9jawedo9fj83wo4jtoqje
        name:
          type: string
          description: name of Hobby
          example: Joggen
        description:
          type: string
          description: description of the hobby
          example: Joggen ist eine Sportart bei der es darum geht moeglichst lange zu laufen
        img:
          type: string
          description: link to cdn with Hobby-Icon
        widgetData:
          type: array
          description: all Widgets which listed on a hobby
          items:
            $ref: "#/components/schemas/widget"
        posts:
          type: array
          description: first 2 posts of the hobby pots
          items:
            $ref: "#/components/schemas/post"


    widget:
      discriminator:
        propertyName: type
      description: Widget which can only seen in closed view
      properties:
        type:
          type: string
          description: widget type


    locationWidget:
      type: object
      allOf:
        - $ref: "#/components/schemas/widget"
      description: Shows where and when (time) the hobby will be executed
      properties:
        location:
          type: string
          description: location where hobby is
          example: Hoechberg Waldsportplatz
        time:
          type: string
          description: time when hobby is in format 00:00
          example: 17:00

    calendarWidget:
      type: object
      allOf:
        - $ref: "#/components/schemas/widget"
      description: Shows when in the Week the hobby will be executed
      properties:
        calendarWidgetDays:
          $ref: "#/components/schemas/calendarWidgetDays"

    calendarWidgetDays:
      type: object
      properties:
        monday:
          type: boolean
        tuesday:
          type: boolean
        wednesday:
          type: boolean
        thursday:
          type: boolean
        friday:
          type: boolean
        saturday:
          type: boolean
        sunday:
          type: boolean

    post:
      type: object
      description: Post which can only seen in opened view
      properties:
        type:
          type: string
          description: post type
          example: post
        id:
          type: string
          description: post id
          example: 28uef9uq34t
        name:
          type: string
          description: Name of post (title)
          example: Wiedermal unterwegs
        description:
          type: string
          description: description of post
          example: Ich war letzten Sonnatg joggen und habe diesen Fuchs gesehen "#joggen"
        img:
          type: string
          description: url ot cdn of post

    likeLogicResponse:
      type: object
      properties:
        userId:
          type: string
          description: UserId which liked
        matched:
          type: boolean
          description: true when users got a match, triggers popup in Front-end

    loginUserBody:
      type: object
      properties:
        email:
          type: string
          description: Users Email
        password:
          type: string
          description: Users Password


    loginUserResponse:
      type: object
      properties:
        sessionId:
          type: string
          description: User session-ID
        refreshToken:
          type: string
          description: User refresh-token
        ttl:
          type: integer
          description: time to life




